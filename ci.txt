import xml.etree.ElementTree as ET
import csv
import io

xml_data = '''<soap-env:body xmlns:soap-env="http://schemas.xmlsoap.org/soap/envelope/">
  <acctlistreply>
    <status>
      <statuscd>200</statuscd>
    </status>
    <ns0:acctdetails xmlns:ns0="http://example.com/ns">
      <ns0:acctcategoryatm>
        <ns0:Acctdetails>

          <ns0:AcctDetail>
            <ns0:applicationdesc>Debit Card</ns0:applicationdesc>
            <ns0:AcctNumber>1111111111</ns0:AcctNumber>
            <ns0:relationship>Primary</ns0:relationship>
            <ns0:EffectiveDate>2023-01-01</ns0:EffectiveDate>
            <ns0:ExpiryDate>2026-01-01</ns0:ExpiryDate>
            <ns0:Address>123 Main St</ns0:Address>
            <ns0:Validity>Valid</ns0:Validity>
            <ns0:ATMCardDetail>
              <ns0:AssociatedAcct>999001</ns0:AssociatedAcct>
              <ns0:cardsratus>A</ns0:cardsratus>
            </ns0:ATMCardDetail>
          </ns0:AcctDetail>

          <ns0:AcctDetail>
            <ns0:applicationdesc>Debit Card</ns0:applicationdesc>
            <ns0:AcctNumber>2222222222</ns0:AcctNumber>
            <ns0:relationship>Primary</ns0:relationship>
            <ns0:EffectiveDate>2022-05-15</ns0:EffectiveDate>
            <ns0:ExpiryDate>2025-05-15</ns0:ExpiryDate>
            <ns0:Validity>Hold</ns0:Validity>
            <ns0:ATMCardDetail>
              <ns0:cardsratus>H</ns0:cardsratus>
            </ns0:ATMCardDetail>
          </ns0:AcctDetail>

          <ns0:AcctDetail>
            <ns0:applicationdesc>Checking</ns0:applicationdesc>
            <ns0:AcctNumber>3333333333</ns0:AcctNumber>
            <ns0:relationship>Joint</ns0:relationship>
            <ns0:Address>456 Elm St</ns0:Address>
          </ns0:AcctDetail>

          <ns0:AcctDetail>
            <ns0:applicationdesc>CD</ns0:applicationdesc>
            <ns0:AcctNumber>4444444444</ns0:AcctNumber>
            <ns0:relationship>Primary</ns0:relationship>
            <ns0:EffectiveDate>2021-10-01</ns0:EffectiveDate>
            <ns0:ExpiryDate>2024-10-01</ns0:ExpiryDate>
            <ns0:Validity>Valid</ns0:Validity>
          </ns0:AcctDetail>

          <ns0:AcctDetail>
            <ns0:applicationdesc>Credit Card</ns0:applicationdesc>
            <ns0:AcctNumber>5555555555</ns0:AcctNumber>
            <ns0:relationship>Authorized User</ns0:relationship>
            <ns0:Address>789 Oak Ave</ns0:Address>
          </ns0:AcctDetail>

          <ns0:AcctDetail>
            <ns0:applicationdesc>Debit Card</ns0:applicationdesc>
            <ns0:AcctNumber>6666666666</ns0:AcctNumber>
            <ns0:relationship>Primary</ns0:relationship>
            <ns0:Address>321 Pine Rd</ns0:Address>
            <ns0:ATMCardDetail>
              <ns0:AssociatedAcct></ns0:AssociatedAcct>
              <ns0:cardsratus>A</ns0:cardsratus>
            </ns0:ATMCardDetail>
          </ns0:AcctDetail>

        </ns0:Acctdetails>
      </ns0:acctcategoryatm>
    </ns0:acctdetails>
  </acctlistreply>
</soap-env:body>'''

namespaces = {
    'soap-env': 'http://schemas.xmlsoap.org/soap/envelope/',
    'ns0': 'http://example.com/ns'
}

root = ET.fromstring(xml_data)

records = []
for detail in root.findall('.//ns0:AcctDetail', namespaces):
    app_desc_raw = detail.findtext('ns0:applicationdesc', default='', namespaces=namespaces)
    if "debit" in app_desc_raw.lower():  # Filter Debit Card only
        acct_number = detail.findtext('ns0:AcctNumber', default='', namespaces=namespaces)
        relationship = detail.findtext('ns0:relationship', default='', namespaces=namespaces)
        associated_acct = detail.findtext('ns0:ATMCardDetail/ns0:AssociatedAcct', default='', namespaces=namespaces)
        cardsratus = detail.findtext('ns0:ATMCardDetail/ns0:cardsratus', default='', namespaces=namespaces)
        effective_date = detail.findtext('ns0:EffectiveDate', default='', namespaces=namespaces)
        expiry_date = detail.findtext('ns0:ExpiryDate', default='', namespaces=namespaces)
        address = detail.findtext('ns0:Address', default='', namespaces=namespaces)
        validity = detail.findtext('ns0:Validity', default='', namespaces=namespaces)

        records.append([
            "DEBIT CARD",
            acct_number,
            relationship,
            associated_acct,
            cardsratus,
            effective_date,
            expiry_date,
            address,
            validity
        ])

# Print as CSV
output = io.StringIO()
writer = csv.writer(output)
writer.writerow(['applicationdesc', 'AcctNumber', 'relationship', 'AssociatedAcct', 'cardsratus', 'EffectiveDate', 'ExpiryDate', 'Address', 'Validity'])
writer.writerows(records)

print(output.getvalue())



=========================








import requests
import csv
import xml.etree.ElementTree as ET

# Namespace mapping
NAMESPACES = {
    'soap-env': 'http://schemas.xmlsoap.org/soap/envelope/',
    'ns0': 'http://example.com/ns'
}

# Endpoint (replace with your actual endpoint)
API_URL = "https://your-api-endpoint.com/soap"

# Prepare output file
OUTPUT_FILE = "output.txt"
with open(OUTPUT_FILE, 'w', newline='') as out_file:
    writer = csv.writer(out_file)
    writer.writerow(['applicationdesc', 'AcctNumber', 'relationship', 'AssociatedAcct', 'cardsratus', 'EffectiveDate', 'ExpiryDate', 'Address', 'Validity'])

# Load account numbers from CSV
with open('input_accounts.csv', newline='') as csvfile:
    reader = csv.DictReader(csvfile)
    for row in reader:
        acct_num = row['account_number'].strip()

        # Construct the XML payload
        payload = f"""
        <soap-env:Envelope xmlns:soap-env="http://schemas.xmlsoap.org/soap/envelope/">
          <soap-env:Body>
            <ns0:GetAccountDetails xmlns:ns0="http://example.com/ns">
              <ns0:AccountNumber>{acct_num}</ns0:AccountNumber>
            </ns0:GetAccountDetails>
          </soap-env:Body>
        </soap-env:Envelope>
        """

        try:
            response = requests.post(API_URL, data=payload, headers={'Content-Type': 'text/xml'})
            response.raise_for_status()

            root = ET.fromstring(response.text)

            for detail in root.findall('.//ns0:AcctDetail', NAMESPACES):
                app_desc = detail.findtext('ns0:applicationdesc', default='', namespaces=NAMESPACES)
                if 'debit' not in app_desc.lower():
                    continue

                data = {
                    'applicationdesc': 'DEBIT CARD',
                    'AcctNumber': detail.findtext('ns0:AcctNumber', '', NAMESPACES),
                    'relationship': detail.findtext('ns0:relationship', '', NAMESPACES),
                    'AssociatedAcct': detail.findtext('ns0:ATMCardDetail/ns0:AssociatedAcct', '', NAMESPACES),
                    'cardsratus': detail.findtext('ns0:ATMCardDetail/ns0:cardsratus', '', NAMESPACES),
                    'EffectiveDate': detail.findtext('ns0:EffectiveDate', '', NAMESPACES),
                    'ExpiryDate': detail.findtext('ns0:ExpiryDate', '', NAMESPACES),
                    'Address': detail.findtext('ns0:Address', '', NAMESPACES),
                    'Validity': detail.findtext('ns0:Validity', '', NAMESPACES),
                }

                # Write to file
                with open(OUTPUT_FILE, 'a', newline='') as out_file:
                    writer = csv.writer(out_file)
                    writer.writerow(data.values())

        except requests.RequestException as e:
            print(f"Error for account {acct_num}: {e}")



