Sure, here’s how you can achieve the same functionality without using `pandas`. Instead, we will use the `openpyxl` library to read the Excel file and extract the data directly.

### Step 1: Set up Flask and `openpyxl`

Ensure you have Flask and `openpyxl` installed:

```bash
pip install flask openpyxl
```

### Step 2: Create an HTML form for file upload

This remains the same as before. Create an HTML form to allow users to upload an Excel file.

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Upload Excel File</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
</head>
<body>
<div class="container mt-5">
    <h2>Upload Excel File</h2>
    <form action="/upload" method="post" enctype="multipart/form-data">
        <div class="form-group">
            <label for="file">Choose Excel file</label>
            <input type="file" class="form-control-file" id="file" name="file">
        </div>
        <button type="submit" class="btn btn-primary">Upload</button>
    </form>
</div>
</body>
</html>
```

### Step 3: Handle the file upload and process the Excel file

Modify your Flask application to handle the file upload and process it using `openpyxl`.

```python
import os
import sqlite3
from flask import Flask, request, redirect, url_for, render_template, flash
from openpyxl import load_workbook

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = 'uploads'
app.secret_key = 'supersecretkey'

# Ensure the upload folder exists
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

# SQLite database setup
DATABASE = 'nfrinsightiq.db'

def get_db():
    conn = sqlite3.connect(DATABASE)
    return conn

def init_db():
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS NFRDetails (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            applicationName TEXT,
            releaseID TEXT,
            businessScenario TEXT,
            transactionName TEXT,
            SLA REAL,
            TPS REAL
        )
    ''')
    conn.commit()
    conn.close()

@app.route('/')
def index():
    return render_template('upload.html')

@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        flash('No file part')
        return redirect(request.url)
    file = request.files['file']
    if file.filename == '':
        flash('No selected file')
        return redirect(request.url)
    if file:
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
        file.save(filepath)
        
        # Process the uploaded file
        try:
            wb = load_workbook(filepath)
            sheet = wb.active
            conn = get_db()
            cursor = conn.cursor()
            
            for row in sheet.iter_rows(min_row=2, values_only=True):  # Assuming the first row is the header
                applicationName, releaseID, businessScenario, transactionName, SLA, TPS = row
                cursor.execute('''
                    INSERT INTO NFRDetails (applicationName, releaseID, businessScenario, transactionName, SLA, TPS)
                    VALUES (?, ?, ?, ?, ?, ?)
                ''', (
                    applicationName, 
                    releaseID, 
                    businessScenario, 
                    transactionName, 
                    SLA, 
                    TPS
                ))
            
            conn.commit()
            conn.close()
            flash('File successfully uploaded and data inserted.')
        except Exception as e:
            flash(f'An error occurred: {e}')
        
        return redirect(url_for('index'))

if __name__ == '__main__':
    init_db()
    app.run(debug=True)
```





-----



To open the edit form as a modal popup instead of navigating to a separate page, you can use Bootstrap modals. Here’s how you can achieve that:

1. **Add Bootstrap and jQuery dependencies**.
2. **Modify your table to include an Edit button that triggers a modal**.
3. **Create the modal structure in your HTML**.
4. **Implement JavaScript to handle the modal logic**.
5. **Update your Flask route to handle AJAX requests for editing records**.

### Step 1: Add Bootstrap and jQuery dependencies

Ensure you have the necessary CSS and JavaScript files for Bootstrap and jQuery in your HTML.

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>NFRInsightIQ</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.5.2/css/bootstrap.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/1.10.21/css/dataTables.bootstrap4.min.css">
    <script src="https://code.jquery.com/jquery-3.5.1.js"></script>
    <script src="https://cdn.datatables.net/1.10.21/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.10.21/js/dataTables.bootstrap4.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</head>
<body>
```

### Step 2: Modify your table to include an Edit button that triggers a modal

Update your table to include Edit buttons with data attributes to store record information.

```html
<div class="container">
    <h2>NFRInsightIQ - Manage NFR elegantly</h2>
    <table id="nfrTable" class="table table-striped table-bordered" style="width:100%">
        <thead>
            <tr>
                <th>Application Name</th>
                <th>Release ID</th>
                <th>Business Scenario</th>
                <th>Trx Name</th>
                <th>SLA</th>
                <th>TPS</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for post in posts %}
            <tr>
                <td>{{ post['applicationName'] }}</td>
                <td>{{ post['releaseID'] }}</td>
                <td>{{ post['businessScenario'] }}</td>
                <td>{{ post['transactionName'] }}</td>
                <td>{{ post['SLA'] }}</td>
                <td>{{ post['TPS'] }}</td>
                <td>
                    <button class="btn btn-primary edit-btn" data-toggle="modal" data-target="#editModal"
                            data-id="{{ post['id'] }}"
                            data-applicationname="{{ post['applicationName'] }}"
                            data-releaseid="{{ post['releaseID'] }}"
                            data-businessscenario="{{ post['businessScenario'] }}"
                            data-transactionname="{{ post['transactionName'] }}"
                            data-sla="{{ post['SLA'] }}"
                            data-tps="{{ post['TPS'] }}">Edit</button>
                    <button class="btn btn-danger delete-btn" data-id="{{ post['id'] }}">Delete</button>
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
</div>
```

### Step 3: Create the modal structure in your HTML

Add a modal structure in your HTML where the edit form will be displayed.

```html
<!-- Edit Modal -->
<div class="modal fade" id="editModal" tabindex="-1" role="dialog" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel">Edit Record</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <form id="editForm" method="POST">
                <div class="modal-body">
                    <div class="form-group">
                        <label for="editApplicationName">Application Name</label>
                        <input type="text" class="form-control" id="editApplicationName" name="applicationName">
                    </div>
                    <div class="form-group">
                        <label for="editReleaseID">Release ID</label>
                        <input type="text" class="form-control" id="editReleaseID" name="releaseID">
                    </div>
                    <div class="form-group">
                        <label for="editBusinessScenario">Business Scenario</label>
                        <input type="text" class="form-control" id="editBusinessScenario" name="businessScenario">
                    </div>
                    <div class="form-group">
                        <label for="editTransactionName">Trx Name</label>
                        <input type="text" class="form-control" id="editTransactionName" name="transactionName">
                    </div>
                    <div class="form-group">
                        <label for="editSLA">SLA</label>
                        <input type="text" class="form-control" id="editSLA" name="SLA">
                    </div>
                    <div class="form-group">
                        <label for="editTPS">TPS</label>
                        <input type="text" class="form-control" id="editTPS" name="TPS">
                    </div>
                    <input type="hidden" id="editID" name="id">
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Save changes</button>
                </div>
            </form>
        </div>
    </div>
</div>
```

### Step 4: Implement JavaScript to handle the modal logic

Add JavaScript to handle the click event on the Edit button, populate the modal form, and handle form submission.

```html
<script>
$(document).ready(function() {
    $('#nfrTable').DataTable();

    // Populate the edit modal with existing data
    $('#editModal').on('show.bs.modal', function (event) {
        var button = $(event.relatedTarget); // Button that triggered the modal
        var id = button.data('id');
        var applicationName = button.data('applicationname');
        var releaseID = button.data('releaseid');
        var businessScenario = button.data('businessscenario');
        var transactionName = button.data('transactionname');
        var SLA = button.data('sla');
        var TPS = button.data('tps');
        
        var modal = $(this);
        modal.find('#editID').val(id);
        modal.find('#editApplicationName').val(applicationName);
        modal.find('#editReleaseID').val(releaseID);
        modal.find('#editBusinessScenario').val(businessScenario);
        modal.find('#editTransactionName').val(transactionName);
        modal.find('#editSLA').val(SLA);
        modal.find('#editTPS').val(TPS);
    });

    // Handle form submission with AJAX
    $('#editForm').on('submit', function(event) {
        event.preventDefault();

        $.ajax({
            url: '/edit/' + $('#editID').val(),
            type: 'POST',
            data: $(this).serialize(),
            success: function(response) {
                if (response.success) {
                    $('#editModal').modal('hide');
                    alert('Record updated successfully.');
                    location.reload();
                } else {
                    alert('Error updating record.');
                }
            }
        });
    });

    // Delete button click event with confirmation
    $('.delete-btn').on('click', function() {
        var id = $(this).data('id');
        if (confirm('Are you sure you want to delete this record?')) {
            $.ajax({
                url: '/delete/' + id,
                type: 'POST',
                success: function(response) {
                    if (response.success) {
                        alert('Record deleted successfully.');
                        location.reload();
                    } else {
                        alert('Error deleting record.');
                    }
                }
            });
        }
    });
});
</script>
```

### Step 5: Update your Flask route to handle AJAX requests for editing records

Modify your Flask route to handle AJAX POST requests for editing records.

```python
from flask import Flask, render_template, request, jsonify
app = Flask(__name__)

# Mock data
posts = [
    {"id": 1, "applicationName": "SunView Treasury Manager", "releaseID": "2023.M07", "businessScenario": "NA", "transactionName": "SVTM Login", "SLA": 10.0, "TPS": 2.0},
    # Add more records as needed
]

@app.route('/')
def index():
    return render_template('index.html', posts=posts)

@app.route('/edit/<int:id>', methods=['POST'])
def edit_record(id):
    record = next((post for post in posts if post["id"] == id), None)
    if record:
        record['applicationName'] = request.form['applicationName']
        record['releaseID'] = request.form['releaseID']
        record['businessScenario'] = request.form['businessScenario']
        record['transactionName'] = request.form['transactionName']
        record['SLA'] = request.form['SLA']
        record['TPS'] = request.form['TPS']
        return jsonify(success=True)
    return


### Explanation

1. **HTML Form**: The HTML form remains the same, allowing users to upload an Excel file.
2. **File Upload Handling**: The `upload_file` route in Flask handles the uploaded file. The file is saved to a directory specified by `UPLOAD_FOLDER`.
3. **Excel File Processing**: Instead of using `pandas`, the `openpyxl` library is used to read the Excel file. The `load_workbook` function opens the Excel file, and `sheet.iter_rows` iterates over the rows, extracting the data.
4. **Database Insertion**: The extracted data is inserted into the SQLite database using a cursor.

### Running the Flask Application

Now you can run your Flask application:

```bash
python app.py
```

Navigate to `http://127.0.0.1:5000/` in your web browser, and you should see the form to upload an Excel file. When you upload a file, it will be processed, and the data will be inserted into the SQLite database.

-----



To convert the given SQL Server stored procedure code to a format that can be used in SQLite, you need to consider the following key differences:

1. **Stored Procedures**: SQLite does not support stored procedures directly like SQL Server. Instead, you can use triggers or scripts to achieve similar functionality.
2. **Variable Declaration**: SQLite uses different syntax for variable handling.
3. **Date and Time Functions**: `GETDATE()` in SQL Server should be replaced with `CURRENT_TIMESTAMP` in SQLite.

Below is a step-by-step translation of your SQL Server procedure to an equivalent SQLite script using a trigger and a function to simulate the behavior:

### Step 1: Create a function to handle the update or insert logic
Since SQLite does not support stored procedures, we will create a user-defined function in SQLite to handle the logic.

```sql
CREATE TABLE IF NOT EXISTS NFRDetails (
    applicationName TEXT,
    releaseID TEXT,
    businessScenario TEXT,
    transactionName TEXT,
    SLA REAL,
    TPS REAL,
    comments TEXT,
    createdBy TEXT,
    modifiedBy TEXT,
    modified_date TEXT
);

CREATE TRIGGER IF NOT EXISTS trg_InsertUpdate_NFRDetails
AFTER INSERT ON NFRDetails
FOR EACH ROW
BEGIN
    UPDATE NFRDetails
    SET 
        applicationName = NEW.applicationName,
        releaseID = NEW.releaseID,
        businessScenario = NEW.businessScenario,
        transactionName = NEW.transactionName,
        SLA = NEW.SLA,
        TPS = NEW.TPS,
        comments = NEW.comments,
        modifiedBy = NEW.modifiedBy,
        modified_date = CURRENT_TIMESTAMP
    WHERE 
        applicationName = NEW.applicationName AND
        businessScenario = NEW.businessScenario AND
        transactionName = NEW.transactionName AND
        releaseID = NEW.releaseID;

    -- If no rows were updated, insert the new row
    INSERT INTO NFRDetails (
        applicationName, releaseID, businessScenario, transactionName, SLA, TPS, comments, createdBy, modifiedBy, modified_date
    )
    SELECT
        NEW.applicationName, NEW.releaseID, NEW.businessScenario, NEW.transactionName, NEW.SLA, NEW.TPS, NEW.comments, NEW.createdBy, NEW.modifiedBy, CURRENT_TIMESTAMP
    WHERE 
        (SELECT changes() = 0);
END;
```

### Step 2: Insert or update the NFRDetails table
To perform an insert or update operation, you would directly execute an `INSERT` statement that triggers the defined behavior.

```sql
INSERT INTO NFRDetails (
    applicationName, releaseID, businessScenario, transactionName, SLA, TPS, comments, createdBy, modifiedBy
) VALUES (
    'app1', 'release1', 'scenario1', 'transaction1', 99.9, 100, 'comment', 'creator', 'modifier'
);
```

This approach leverages SQLite triggers to handle the logic defined in your SQL Server stored procedure. The `INSERT` statement will trigger the logic to update the row if it exists or insert a new one if it does not.

### Explanation
- **Trigger**: `AFTER INSERT ON NFRDetails`: This trigger fires after an insert operation on the `NFRDetails` table.
- **Update Statement**: The `UPDATE` statement inside the trigger attempts to update the existing row.
- **Insert Statement**: The `INSERT` statement with the condition `(SELECT changes() = 0)` ensures that a new row is inserted only if the `UPDATE` did not modify any rows (indicated by `changes() = 0`).

By following these steps, you can simulate the behavior of a SQL Server stored procedure for insert or update operations in SQLite.



-----

Sure, I'll help you translate the SQL Server code to SQLite. Below is the equivalent SQLite code for the provided SQL Server stored procedure. Note that SQLite does not support stored procedures natively. Instead, you would typically handle this logic in the application layer, such as within your Flask application.

For demonstration purposes, I'll provide a script-like approach that you can use in your Flask application or any other SQLite-compatible environment.

### SQL Server Procedure

Here is the original SQL Server procedure you provided:

```sql
CREATE PROCEDURE [dbo].[NFROperationDependency_InsertUpdate]
    @applicationName varchar(255),
    @releaseID varchar(255),
    @businessScenario varchar(255),
    @transactionName varchar(255),
    @backendCall varchar(255),
    @callType varchar(255),
    @createdBy varchar(255),
    @modifiedBy varchar(255),
    @retValue varchar(255) OUT
AS
BEGIN
    SET NOCOUNT ON;

    IF EXISTS (SELECT 1 FROM NFROperationDependency 
               WHERE applicationName = @applicationName 
               AND businessScenario = @businessScenario 
               AND transactionName = @transactionName 
               AND releaseID = @releaseID 
               AND backendCall = @backendCall)
    BEGIN
        UPDATE NFROperationDependency 
        SET applicationName = @applicationName,
            releaseID = @releaseID,
            businessScenario = @businessScenario,
            transactionName = @transactionName,
            backendCall = @backendCall,
            callType = @callType,
            modifiedBy = @modifiedBy,
            modified_date = GETDATE()
        WHERE applicationName = @applicationName 
          AND businessScenario = @businessScenario 
          AND transactionName = @transactionName 
          AND releaseID = @releaseID 
          AND backendCall = @backendCall;
          
        SET @retValue = 'UPDATED';
    END
    ELSE
    BEGIN
        INSERT INTO NFROperationDependency (applicationName, releaseID, businessScenario, transactionName, backendCall, callType, createdBy, modifiedBy)
        VALUES (@applicationName, @releaseID, @businessScenario, @transactionName, @backendCall, @callType, @createdBy, @modifiedBy);
        
        SET @retValue = 'INSERTED';
    END
END;
```

### Equivalent SQLite Code

Since SQLite doesn't support stored procedures, we will use Python within a Flask route to perform the equivalent logic.

```python
import sqlite3
from flask import Flask, request, jsonify

app = Flask(__name__)
DATABASE = 'nfrinsightiq.db'

def get_db():
    conn = sqlite3.connect(DATABASE)
    return conn

@app.route('/update_or_insert', methods=['POST'])
def update_or_insert():
    data = request.json
    applicationName = data['applicationName']
    releaseID = data['releaseID']
    businessScenario = data['businessScenario']
    transactionName = data['transactionName']
    backendCall = data['backendCall']
    callType = data['callType']
    createdBy = data['createdBy']
    modifiedBy = data['modifiedBy']
    
    conn = get_db()
    cursor = conn.cursor()

    cursor.execute('''
        SELECT 1 FROM NFROperationDependency 
        WHERE applicationName = ? 
          AND businessScenario = ? 
          AND transactionName = ? 
          AND releaseID = ? 
          AND backendCall = ?
    ''', (applicationName, businessScenario, transactionName, releaseID, backendCall))

    exists = cursor.fetchone()

    if exists:
        cursor.execute('''
            UPDATE NFROperationDependency 
            SET applicationName = ?,
                releaseID = ?,
                businessScenario = ?,
                transactionName = ?,
                backendCall = ?,
                callType = ?,
                modifiedBy = ?,
                modified_date = datetime('now')
            WHERE applicationName = ? 
              AND businessScenario = ? 
              AND transactionName = ? 
              AND releaseID = ? 
              AND backendCall = ?
        ''', (applicationName, releaseID, businessScenario, transactionName, backendCall, callType, modifiedBy, applicationName, businessScenario, transactionName, releaseID, backendCall))
        
        retValue = 'UPDATED'
    else:
        cursor.execute('''
            INSERT INTO NFROperationDependency (applicationName, releaseID, businessScenario, transactionName, backendCall, callType, createdBy, modifiedBy)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        ''', (applicationName, releaseID, businessScenario, transactionName, backendCall, callType, createdBy, modifiedBy))
        
        retValue = 'INSERTED'

    conn.commit()
    conn.close()

    return jsonify({'retValue': retValue})

if __name__ == '__main__':
    app.run(debug=True)
```

### Explanation

1. **Flask Endpoint**: We define a Flask route `/update_or_insert` that listens for POST requests. This endpoint receives the data in JSON format.
2. **Database Connection**: A function `get_db()` is used to connect to the SQLite database.
3. **Select Query**: We use a `SELECT` query to check if a record with the specified criteria already exists.
4. **Update or Insert**: Depending on the existence of the record, we either `UPDATE` the existing record or `INSERT` a new one.
5. **Return Value**: The endpoint returns a JSON response indicating whether the operation was an update or an insert.

### Initialization of the SQLite Database

Make sure to initialize your database and create the `NFROperationDependency` table before running the application:

```python
def init_db():
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS NFROperationDependency (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            applicationName TEXT,
            releaseID TEXT,
            businessScenario TEXT,
            transactionName TEXT,
            backendCall TEXT,
            callType TEXT,
            createdBy TEXT,
            modifiedBy TEXT,
            modified_date TEXT
        )
    ''')
    conn.commit()
    conn.close()

if __name__ == '__main__':
    init_db()
    app.run(debug=True)
```

This script will create the necessary table in your SQLite database if it doesn't already exist. You can now run your Flask application and use the `/update_or_insert` endpoint to insert or update records based on the provided data.




--


To create a web page similar to the one shown, using Python Flask and SQLite, you'll need to do the following:

1. **Set up the Flask application**.
2. **Create the SQLite database and populate it with sample data**.
3. **Create routes to fetch and display data**.
4. **Use JavaScript and HTML to handle the pop-up functionality for the backend details**.

Let's break this down step-by-step:

### Step 1: Set Up Flask Application

First, set up the basic Flask application structure.

#### Directory Structure
```
flask_app/
    ├── app.py
    ├── templates/
    │   └── index.html
    ├── static/
    │   └── styles.css
    └── data/
        └── nfr.db
```

#### app.py
```python
from flask import Flask, render_template, request, jsonify
import sqlite3

app = Flask(__name__)

# Function to get a database connection
def get_db_connection():
    conn = sqlite3.connect('data/nfr.db')
    conn.row_factory = sqlite3.Row
    return conn

@app.route('/')
def index():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM NFRDetails")
    nfr_records = cursor.fetchall()
    conn.close()
    return render_template('index.html', records=nfr_records)

@app.route('/backend_details/<app_name>/<transaction_name>')
def backend_details(app_name, transaction_name):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM NFROperationDependency WHERE applicationName = ? AND transactionName = ?", (app_name, transaction_name))
    backend_details = cursor.fetchall()
    conn.close()
    return jsonify([dict(ix) for ix in backend_details])

if __name__ == '__main__':
    app.run(debug=True)
```

### Step 2: Create SQLite Database

Create an SQLite database (`nfr.db`) with tables and some sample data.

#### Create and populate the SQLite database
```sql
-- Create NFRDetails table
CREATE TABLE NFRDetails (
    applicationName TEXT,
    releaseID TEXT,
    transactionName TEXT,
    SLA INTEGER
);

-- Create NFROperationDependency table
CREATE TABLE NFROperationDependency (
    applicationName TEXT,
    releaseID TEXT,
    transactionName TEXT,
    backendCall TEXT,
    callType TEXT,
    duration INTEGER
);

-- Insert sample data into NFRDetails
INSERT INTO NFRDetails (applicationName, releaseID, transactionName, SLA) VALUES ('OLB', '2023.7', 'Offers', 19);
INSERT INTO NFRDetails (applicationName, releaseID, transactionName, SLA) VALUES ('OLB', '2023.7', 'TrxHistory', 15);

-- Insert sample data into NFROperationDependency
INSERT INTO NFROperationDependency (applicationName, releaseID, transactionName, backendCall, callType, duration) VALUES ('OLB', '2023.7', 'Offers', 'WS_Offers', 'Sync', 12);
INSERT INTO NFROperationDependency (applicationName, releaseID, transactionName, backendCall, callType, duration) VALUES ('OLB', '2023.7', 'TrxHistory', 'WS_Rewards', 'Async', 10);
```

### Step 3: Create Routes to Fetch and Display Data

You already have the routes set up in `app.py`. The main route fetches data from the `NFRDetails` table and passes it to the template. Another route fetches backend details based on the application name and transaction name.

### Step 4: HTML Template

Create an HTML template to display the data.

#### templates/index.html
```html
<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>NFR Insight</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1>Non-Functional Requirement Records</h1>
    <table id="recordsTable">
        <thead>
            <tr>
                <th>Application Name</th>
                <th>Release ID</th>
                <th>Transaction Name</th>
                <th>SLA (sec)</th>
                <th>Comparison</th>
                <th>Backend Details</th>
            </tr>
        </thead>
        <tbody>
            {% for record in records %}
                <tr>
                    <td>{{ record['applicationName'] }}</td>
                    <td>{{ record['releaseID'] }}</td>
                    <td>{{ record['transactionName'] }}</td>
                    <td>{{ record['SLA'] }}</td>
                    <td><span class="indicator">{{ '↑' if record['SLA'] > 10 else '↓' }}</span></td>
                    <td><button class="details-btn" data-app-name="{{ record['applicationName'] }}" data-trx-name="{{ record['transactionName'] }}">View Details</button></td>
                </tr>
            {% endfor %}
        </tbody>
    </table>

    <div id="modal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2>Backend Details</h2>
            <div id="backendDetails"></div>
        </div>
    </div>

    <script>
        $(document).ready(function() {
            $('.details-btn').on('click', function() {
                var appName = $(this).data('app-name');
                var trxName = $(this).data('trx-name');
                $.get('/backend_details/' + appName + '/' + trxName, function(data) {
                    var detailsHtml = '<ul>';
                    data.forEach(function(detail) {
                        detailsHtml += '<li>Backend Call: ' + detail.backendCall + ', Type: ' + detail.callType + ', Duration: ' + detail.duration + ' sec</li>';
                    });
                    detailsHtml += '</ul>';
                    $('#backendDetails').html(detailsHtml);
                    $('#modal').show();
                });
            });

            $('.close').on('click', function() {
                $('#modal').hide();
            });
        });
    </script>
</body>
</html>
```

#### static/styles.css
```css
body {
    font-family: Arial, sans-serif;
}

table {
    width: 100%;
    border-collapse: collapse;
}

th, td {
    border: 1px solid #ddd;
    padding: 8px;
    text-align: center;
}

th {
    background-color: #f2f2f2;
}

.indicator {
    font-weight: bold;
    color: green;
}

button.details-btn {
    padding: 5px 10px;
    cursor: pointer;
}

.modal {
    display: none;
    position: fixed;
    z-index: 1;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgb(0, 0, 0);
    background-color: rgba(0, 0, 0, 0.4);
}

.modal-content {
    background-color: #fefefe;
    margin: 15% auto;
    padding: 20px;
    border: 1px solid #888;
    width: 80%;
}

.close {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
}

.close:hover,
.close:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
}
```

### Explanation
1. **Flask Backend**: The `app.py` file handles the server-side logic. It connects to the SQLite database, retrieves data, and serves it to the HTML template.
2. **HTML Template**: The `index.html` file is responsible for displaying the data in a table and handling user interactions.
3. **JavaScript and CSS**: JavaScript (jQuery) is used to handle the click events for the "View Details" buttons and display the modal with backend details. CSS is used for basic styling of the table and modal.

This setup should help you create a web page similar to the one in the provided image using Flask and SQLite.


----

To create a web page similar to the one shown, using Python Flask and SQLite, you'll need to do the following:

1. **Set up the Flask application**.
2. **Create the SQLite database and populate it with sample data**.
3. **Create routes to fetch and display data**.
4. **Use JavaScript and HTML to handle the pop-up functionality for the backend details**.

Let's break this down step-by-step:

### Step 1: Set Up Flask Application

First, set up the basic Flask application structure.

#### Directory Structure
```
flask_app/
    ├── app.py
    ├── templates/
    │   └── index.html
    ├── static/
    │   └── styles.css
    └── data/
        └── nfr.db
```

#### app.py
```python
from flask import Flask, render_template, request, jsonify
import sqlite3

app = Flask(__name__)

# Function to get a database connection
def get_db_connection():
    conn = sqlite3.connect('data/nfr.db')
    conn.row_factory = sqlite3.Row
    return conn

@app.route('/')
def index():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM NFRDetails")
    nfr_records = cursor.fetchall()
    conn.close()
    return render_template('index.html', records=nfr_records)

@app.route('/backend_details/<app_name>/<transaction_name>')
def backend_details(app_name, transaction_name):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM NFROperationDependency WHERE applicationName = ? AND transactionName = ?", (app_name, transaction_name))
    backend_details = cursor.fetchall()
    conn.close()
    return jsonify([dict(ix) for ix in backend_details])

if __name__ == '__main__':
    app.run(debug=True)
```

### Step 2: Create SQLite Database

Create an SQLite database (`nfr.db`) with tables and some sample data.

#### Create and populate the SQLite database
```sql
-- Create NFRDetails table
CREATE TABLE NFRDetails (
    applicationName TEXT,
    releaseID TEXT,
    transactionName TEXT,
    SLA INTEGER
);

-- Create NFROperationDependency table
CREATE TABLE NFROperationDependency (
    applicationName TEXT,
    releaseID TEXT,
    transactionName TEXT,
    backendCall TEXT,
    callType TEXT,
    duration INTEGER
);

-- Insert sample data into NFRDetails
INSERT INTO NFRDetails (applicationName, releaseID, transactionName, SLA) VALUES ('OLB', '2023.7', 'Offers', 19);
INSERT INTO NFRDetails (applicationName, releaseID, transactionName, SLA) VALUES ('OLB', '2023.7', 'TrxHistory', 15);

-- Insert sample data into NFROperationDependency
INSERT INTO NFROperationDependency (applicationName, releaseID, transactionName, backendCall, callType, duration) VALUES ('OLB', '2023.7', 'Offers', 'WS_Offers', 'Sync', 12);
INSERT INTO NFROperationDependency (applicationName, releaseID, transactionName, backendCall, callType, duration) VALUES ('OLB', '2023.7', 'TrxHistory', 'WS_Rewards', 'Async', 10);
```

### Step 3: Create Routes to Fetch and Display Data

You already have the routes set up in `app.py`. The main route fetches data from the `NFRDetails` table and passes it to the template. Another route fetches backend details based on the application name and transaction name.

### Step 4: HTML Template

Create an HTML template to display the data.

#### templates/index.html
```html
<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>NFR Insight</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1>Non-Functional Requirement Records</h1>
    <table id="recordsTable">
        <thead>
            <tr>
                <th>Application Name</th>
                <th>Release ID</th>
                <th>Transaction Name</th>
                <th>SLA (sec)</th>
                <th>Comparison</th>
                <th>Backend Details</th>
            </tr>
        </thead>
        <tbody>
            {% for record in records %}
                <tr>
                    <td>{{ record['applicationName'] }}</td>
                    <td>{{ record['releaseID'] }}</td>
                    <td>{{ record['transactionName'] }}</td>
                    <td>{{ record['SLA'] }}</td>
                    <td><span class="indicator">{{ '↑' if record['SLA'] > 10 else '↓' }}</span></td>
                    <td><button class="details-btn" data-app-name="{{ record['applicationName'] }}" data-trx-name="{{ record['transactionName'] }}">View Details</button></td>
                </tr>
            {% endfor %}
        </tbody>
    </table>

    <div id="modal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2>Backend Details</h2>
            <div id="backendDetails"></div>
        </div>
    </div>

    <script>
        $(document).ready(function() {
            $('.details-btn').on('click', function() {
                var appName = $(this).data('app-name');
                var trxName = $(this).data('trx-name');
                $.get('/backend_details/' + appName + '/' + trxName, function(data) {
                    var detailsHtml = '<ul>';
                    data.forEach(function(detail) {
                        detailsHtml += '<li>Backend Call: ' + detail.backendCall + ', Type: ' + detail.callType + ', Duration: ' + detail.duration + ' sec</li>';
                    });
                    detailsHtml += '</ul>';
                    $('#backendDetails').html(detailsHtml);
                    $('#modal').show();
                });
            });

            $('.close').on('click', function() {
                $('#modal').hide();
            });
        });
    </script>
</body>
</html>
```

#### static/styles.css
```css
body {
    font-family: Arial, sans-serif;
}

table {
    width: 100%;
    border-collapse: collapse;
}

th, td {
    border: 1px solid #ddd;
    padding: 8px;
    text-align: center;
}

th {
    background-color: #f2f2f2;
}

.indicator {
    font-weight: bold;
    color: green;
}

button.details-btn {
    padding: 5px 10px;
    cursor: pointer;
}

.modal {
    display: none;
    position: fixed;
    z-index: 1;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgb(0, 0, 0);
    background-color: rgba(0, 0, 0, 0.4);
}

.modal-content {
    background-color: #fefefe;
    margin: 15% auto;
    padding: 20px;
    border: 1px solid #888;
    width: 80%;
}

.close {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
}

.close:hover,
.close:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
}
```

### Explanation
1. **Flask Backend**: The `app.py` file handles the server-side logic. It connects to the SQLite database, retrieves data, and serves it to the HTML template.
2. **HTML Template**: The `index.html` file is responsible for displaying the data in a table and handling user interactions.
3. **JavaScript and CSS**: JavaScript (jQuery) is used to handle the click events for the "View Details" buttons and display the modal with backend details. CSS is used for basic styling of the table and modal.

This setup should help you create a web page similar to the one in the provided image using Flask and SQLite.





---

To handle showing messages returned from `app.py` on the front end, we will use AJAX for the form submissions and dynamically display the messages on the page. We will create an area on the page to display these messages. Below is the detailed implementation:

### `app.py`

Ensure the `edit_record` and `delete_record` routes return JSON responses for success and error messages:

```python
@app.route('/edit/<int:id>', methods=['POST'])
def edit_record(id):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        applicationName = request.form['applicationName']
        releaseID = request.form['releaseID']
        businessScenario = request.form['businessScenario']
        transactionName = request.form['transactionName']
        SLA = request.form['SLA']
        TPS = request.form['TPS']
        cursor.execute('''
            UPDATE NFRDetails
            SET applicationName = ?, releaseID = ?, businessScenario = ?, transactionName = ?, SLA = ?, TPS = ?
            WHERE id = ?
        ''', (applicationName, releaseID, businessScenario, transactionName, SLA, TPS, id))
        conn.commit()
        response = {"status": "success", "message": f"Record with ID {id} successfully updated"}
    except Exception as e:
        conn.rollback()
        response = {"status": "error", "message": str(e)}
    finally:
        conn.close()
    return jsonify(response)

@app.route('/delete/<int:id>', methods=['POST'])
def delete_record(id):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("DELETE FROM NFRDetails WHERE id = ?", (id,))
        conn.commit()
        response = {"status": "success", "message": f"Record with ID {id} successfully deleted"}
    except Exception as e:
        conn.rollback()
        response = {"status": "error", "message": str(e)}
    finally:
        conn.close()
    return jsonify(response)
```

### JavaScript for Handling Modal, AJAX Requests, and Message Display

Include this JavaScript in your HTML to handle the edit and delete operations with AJAX and display messages dynamically:

```javascript
$(document).ready(function() {
  function showMessage(message, type) {
    var messageContainer = $('#messageContainer');
    messageContainer.removeClass('alert-success alert-danger');
    if (type === 'success') {
      messageContainer.addClass('alert-success');
    } else {
      messageContainer.addClass('alert-danger');
    }
    messageContainer.text(message).show();
    setTimeout(function() {
      messageContainer.hide();
    }, 5000);
  }

  $('.edit-btn').click(function() {
    var id = $(this).data('id');
    $.get('/edit/' + id, function(data) {
      $('#editId').val(data.id);
      $('#editApplicationName').val(data.applicationName);
      $('#editReleaseID').val(data.releaseID);
      $('#editBusinessScenario').val(data.businessScenario);
      $('#editTransactionName').val(data.transactionName);
      $('#editSLA').val(data.SLA);
      $('#editTPS').val(data.TPS);
      $('#editModal').modal('show');
    });
  });

  $('#editForm').submit(function(e) {
    e.preventDefault();
    var id = $('#editId').val();
    var formData = $(this).serialize();
    $.post('/edit/' + id, formData, function(response) {
      if (response.status == 'success') {
        showMessage(response.message, 'success');
        $('#editModal').modal('hide');
        location.reload();  // Reload the page to reflect changes
      } else {
        showMessage(response.message, 'error');
      }
    });
  });

  $('.delete-btn').click(function() {
    var id = $(this).data('id');
    if (confirm('Are you sure you want to delete this record?')) {
      $.post('/delete/' + id, function(response) {
        if (response.status == 'success') {
          showMessage(response.message, 'success');
          location.reload();  // Reload the page to reflect changes
        } else {
          showMessage(response.message, 'error');
        }
      });
    }
  });
});
```

### HTML for Edit Modal and Message Display

Here's an example of the HTML structure for the edit modal and a container to display messages:

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>NFR Management</title>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
  <script src="path/to/your/javascript.js"></script> <!-- Ensure to link your JS file here -->
</head>
<body>
  <div class="container">
    <h2>NFR Management</h2>
    
    <!-- Message Container -->
    <div id="messageContainer" class="alert" style="display: none;"></div>

    <!-- Table of Records -->
    <table class="table table-bordered">
      <thead>
        <tr>
          <th>ID</th>
          <th>Application Name</th>
          <th>Release ID</th>
          <th>Business Scenario</th>
          <th>Transaction Name</th>
          <th>SLA</th>
          <th>TPS</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        {% for record in records %}
        <tr>
          <td>{{ record.id }}</td>
          <td>{{ record.applicationName }}</td>
          <td>{{ record.releaseID }}</td>
          <td>{{ record.businessScenario }}</td>
          <td>{{ record.transactionName }}</td>
          <td>{{ record.SLA }}</td>
          <td>{{ record.TPS }}</td>
          <td>
            <button class="btn btn-primary edit-btn" data-id="{{ record.id }}">Edit</button>
            <button class="btn btn-danger delete-btn" data-id="{{ record.id }}">Delete</button>
          </td>
        </tr>
        {% endfor %}
      </tbody>
    </table>

    <!-- Edit Modal HTML -->
    <div class="modal" id="editModal">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Edit Record</h5>
            <button type="button" class="close" data-dismiss="modal">&times;</button>
          </div>
          <div class="modal-body">
            <form id="editForm">
              <input type="hidden" id="editId" name="id">
              <div class="form-group">
                <label for="editApplicationName">Application Name</label>
                <input type="text" class="form-control" id="editApplicationName" name="applicationName" required>
              </div>
              <div class="form-group">
                <label for="editReleaseID">Release ID</label>
                <input type="text" class="form-control" id="editReleaseID" name="releaseID" required>
              </div>
              <div class="form-group">
                <label for="editBusinessScenario">Business Scenario</label>
                <input type="text" class="form-control" id="editBusinessScenario" name="businessScenario" required>
              </div>
              <div class="form-group">
                <label for="editTransactionName">Transaction Name</label>
                <input type="text" class="form-control" id="editTransactionName" name="transactionName" required>
              </div>
              <div class="form-group">
                <label for="editSLA">SLA</label>
                <input type="number" class="form-control" id="editSLA" name="SLA" required>
              </div>
              <div class="form-group">
                <label for="editTPS">TPS</label>
                <input type="number" class="form-control" id="editTPS" name="TPS" required>
              </div>
              <button type="submit" class="btn btn-primary">Save changes</button>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
</body>
</html>
```

### Summary

1. **Backend**: Updated the `edit_record` and `delete_record` routes in `app.py` to return JSON responses for success and error messages.
2. **Frontend**: Added JavaScript to handle form submissions with AJAX and display messages dynamically in a designated message container.
3. **HTML**: Included a message container to display success or error messages and a modal form for editing records.

This approach ensures that the user receives immediate feedback on their actions without needing to refresh the page.


