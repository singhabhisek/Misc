Sure, here’s how you can achieve the same functionality without using `pandas`. Instead, we will use the `openpyxl` library to read the Excel file and extract the data directly.

### Step 1: Set up Flask and `openpyxl`

Ensure you have Flask and `openpyxl` installed:

```bash
pip install flask openpyxl
```

### Step 2: Create an HTML form for file upload

This remains the same as before. Create an HTML form to allow users to upload an Excel file.

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Upload Excel File</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
</head>
<body>
<div class="container mt-5">
    <h2>Upload Excel File</h2>
    <form action="/upload" method="post" enctype="multipart/form-data">
        <div class="form-group">
            <label for="file">Choose Excel file</label>
            <input type="file" class="form-control-file" id="file" name="file">
        </div>
        <button type="submit" class="btn btn-primary">Upload</button>
    </form>
</div>
</body>
</html>
```

### Step 3: Handle the file upload and process the Excel file

Modify your Flask application to handle the file upload and process it using `openpyxl`.

```python
import os
import sqlite3
from flask import Flask, request, redirect, url_for, render_template, flash
from openpyxl import load_workbook

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = 'uploads'
app.secret_key = 'supersecretkey'

# Ensure the upload folder exists
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

# SQLite database setup
DATABASE = 'nfrinsightiq.db'

def get_db():
    conn = sqlite3.connect(DATABASE)
    return conn

def init_db():
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS NFRDetails (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            applicationName TEXT,
            releaseID TEXT,
            businessScenario TEXT,
            transactionName TEXT,
            SLA REAL,
            TPS REAL
        )
    ''')
    conn.commit()
    conn.close()

@app.route('/')
def index():
    return render_template('upload.html')

@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        flash('No file part')
        return redirect(request.url)
    file = request.files['file']
    if file.filename == '':
        flash('No selected file')
        return redirect(request.url)
    if file:
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
        file.save(filepath)
        
        # Process the uploaded file
        try:
            wb = load_workbook(filepath)
            sheet = wb.active
            conn = get_db()
            cursor = conn.cursor()
            
            for row in sheet.iter_rows(min_row=2, values_only=True):  # Assuming the first row is the header
                applicationName, releaseID, businessScenario, transactionName, SLA, TPS = row
                cursor.execute('''
                    INSERT INTO NFRDetails (applicationName, releaseID, businessScenario, transactionName, SLA, TPS)
                    VALUES (?, ?, ?, ?, ?, ?)
                ''', (
                    applicationName, 
                    releaseID, 
                    businessScenario, 
                    transactionName, 
                    SLA, 
                    TPS
                ))
            
            conn.commit()
            conn.close()
            flash('File successfully uploaded and data inserted.')
        except Exception as e:
            flash(f'An error occurred: {e}')
        
        return redirect(url_for('index'))

if __name__ == '__main__':
    init_db()
    app.run(debug=True)
```





-----



To open the edit form as a modal popup instead of navigating to a separate page, you can use Bootstrap modals. Here’s how you can achieve that:

1. **Add Bootstrap and jQuery dependencies**.
2. **Modify your table to include an Edit button that triggers a modal**.
3. **Create the modal structure in your HTML**.
4. **Implement JavaScript to handle the modal logic**.
5. **Update your Flask route to handle AJAX requests for editing records**.

### Step 1: Add Bootstrap and jQuery dependencies

Ensure you have the necessary CSS and JavaScript files for Bootstrap and jQuery in your HTML.

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>NFRInsightIQ</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.5.2/css/bootstrap.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/1.10.21/css/dataTables.bootstrap4.min.css">
    <script src="https://code.jquery.com/jquery-3.5.1.js"></script>
    <script src="https://cdn.datatables.net/1.10.21/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.10.21/js/dataTables.bootstrap4.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</head>
<body>
```

### Step 2: Modify your table to include an Edit button that triggers a modal

Update your table to include Edit buttons with data attributes to store record information.

```html
<div class="container">
    <h2>NFRInsightIQ - Manage NFR elegantly</h2>
    <table id="nfrTable" class="table table-striped table-bordered" style="width:100%">
        <thead>
            <tr>
                <th>Application Name</th>
                <th>Release ID</th>
                <th>Business Scenario</th>
                <th>Trx Name</th>
                <th>SLA</th>
                <th>TPS</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for post in posts %}
            <tr>
                <td>{{ post['applicationName'] }}</td>
                <td>{{ post['releaseID'] }}</td>
                <td>{{ post['businessScenario'] }}</td>
                <td>{{ post['transactionName'] }}</td>
                <td>{{ post['SLA'] }}</td>
                <td>{{ post['TPS'] }}</td>
                <td>
                    <button class="btn btn-primary edit-btn" data-toggle="modal" data-target="#editModal"
                            data-id="{{ post['id'] }}"
                            data-applicationname="{{ post['applicationName'] }}"
                            data-releaseid="{{ post['releaseID'] }}"
                            data-businessscenario="{{ post['businessScenario'] }}"
                            data-transactionname="{{ post['transactionName'] }}"
                            data-sla="{{ post['SLA'] }}"
                            data-tps="{{ post['TPS'] }}">Edit</button>
                    <button class="btn btn-danger delete-btn" data-id="{{ post['id'] }}">Delete</button>
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
</div>
```

### Step 3: Create the modal structure in your HTML

Add a modal structure in your HTML where the edit form will be displayed.

```html
<!-- Edit Modal -->
<div class="modal fade" id="editModal" tabindex="-1" role="dialog" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel">Edit Record</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <form id="editForm" method="POST">
                <div class="modal-body">
                    <div class="form-group">
                        <label for="editApplicationName">Application Name</label>
                        <input type="text" class="form-control" id="editApplicationName" name="applicationName">
                    </div>
                    <div class="form-group">
                        <label for="editReleaseID">Release ID</label>
                        <input type="text" class="form-control" id="editReleaseID" name="releaseID">
                    </div>
                    <div class="form-group">
                        <label for="editBusinessScenario">Business Scenario</label>
                        <input type="text" class="form-control" id="editBusinessScenario" name="businessScenario">
                    </div>
                    <div class="form-group">
                        <label for="editTransactionName">Trx Name</label>
                        <input type="text" class="form-control" id="editTransactionName" name="transactionName">
                    </div>
                    <div class="form-group">
                        <label for="editSLA">SLA</label>
                        <input type="text" class="form-control" id="editSLA" name="SLA">
                    </div>
                    <div class="form-group">
                        <label for="editTPS">TPS</label>
                        <input type="text" class="form-control" id="editTPS" name="TPS">
                    </div>
                    <input type="hidden" id="editID" name="id">
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Save changes</button>
                </div>
            </form>
        </div>
    </div>
</div>
```

### Step 4: Implement JavaScript to handle the modal logic

Add JavaScript to handle the click event on the Edit button, populate the modal form, and handle form submission.

```html
<script>
$(document).ready(function() {
    $('#nfrTable').DataTable();

    // Populate the edit modal with existing data
    $('#editModal').on('show.bs.modal', function (event) {
        var button = $(event.relatedTarget); // Button that triggered the modal
        var id = button.data('id');
        var applicationName = button.data('applicationname');
        var releaseID = button.data('releaseid');
        var businessScenario = button.data('businessscenario');
        var transactionName = button.data('transactionname');
        var SLA = button.data('sla');
        var TPS = button.data('tps');
        
        var modal = $(this);
        modal.find('#editID').val(id);
        modal.find('#editApplicationName').val(applicationName);
        modal.find('#editReleaseID').val(releaseID);
        modal.find('#editBusinessScenario').val(businessScenario);
        modal.find('#editTransactionName').val(transactionName);
        modal.find('#editSLA').val(SLA);
        modal.find('#editTPS').val(TPS);
    });

    // Handle form submission with AJAX
    $('#editForm').on('submit', function(event) {
        event.preventDefault();

        $.ajax({
            url: '/edit/' + $('#editID').val(),
            type: 'POST',
            data: $(this).serialize(),
            success: function(response) {
                if (response.success) {
                    $('#editModal').modal('hide');
                    alert('Record updated successfully.');
                    location.reload();
                } else {
                    alert('Error updating record.');
                }
            }
        });
    });

    // Delete button click event with confirmation
    $('.delete-btn').on('click', function() {
        var id = $(this).data('id');
        if (confirm('Are you sure you want to delete this record?')) {
            $.ajax({
                url: '/delete/' + id,
                type: 'POST',
                success: function(response) {
                    if (response.success) {
                        alert('Record deleted successfully.');
                        location.reload();
                    } else {
                        alert('Error deleting record.');
                    }
                }
            });
        }
    });
});
</script>
```

### Step 5: Update your Flask route to handle AJAX requests for editing records

Modify your Flask route to handle AJAX POST requests for editing records.

```python
from flask import Flask, render_template, request, jsonify
app = Flask(__name__)

# Mock data
posts = [
    {"id": 1, "applicationName": "SunView Treasury Manager", "releaseID": "2023.M07", "businessScenario": "NA", "transactionName": "SVTM Login", "SLA": 10.0, "TPS": 2.0},
    # Add more records as needed
]

@app.route('/')
def index():
    return render_template('index.html', posts=posts)

@app.route('/edit/<int:id>', methods=['POST'])
def edit_record(id):
    record = next((post for post in posts if post["id"] == id), None)
    if record:
        record['applicationName'] = request.form['applicationName']
        record['releaseID'] = request.form['releaseID']
        record['businessScenario'] = request.form['businessScenario']
        record['transactionName'] = request.form['transactionName']
        record['SLA'] = request.form['SLA']
        record['TPS'] = request.form['TPS']
        return jsonify(success=True)
    return


### Explanation

1. **HTML Form**: The HTML form remains the same, allowing users to upload an Excel file.
2. **File Upload Handling**: The `upload_file` route in Flask handles the uploaded file. The file is saved to a directory specified by `UPLOAD_FOLDER`.
3. **Excel File Processing**: Instead of using `pandas`, the `openpyxl` library is used to read the Excel file. The `load_workbook` function opens the Excel file, and `sheet.iter_rows` iterates over the rows, extracting the data.
4. **Database Insertion**: The extracted data is inserted into the SQLite database using a cursor.

### Running the Flask Application

Now you can run your Flask application:

```bash
python app.py
```

Navigate to `http://127.0.0.1:5000/` in your web browser, and you should see the form to upload an Excel file. When you upload a file, it will be processed, and the data will be inserted into the SQLite database.

-----



To convert the given SQL Server stored procedure code to a format that can be used in SQLite, you need to consider the following key differences:

1. **Stored Procedures**: SQLite does not support stored procedures directly like SQL Server. Instead, you can use triggers or scripts to achieve similar functionality.
2. **Variable Declaration**: SQLite uses different syntax for variable handling.
3. **Date and Time Functions**: `GETDATE()` in SQL Server should be replaced with `CURRENT_TIMESTAMP` in SQLite.

Below is a step-by-step translation of your SQL Server procedure to an equivalent SQLite script using a trigger and a function to simulate the behavior:

### Step 1: Create a function to handle the update or insert logic
Since SQLite does not support stored procedures, we will create a user-defined function in SQLite to handle the logic.

```sql
CREATE TABLE IF NOT EXISTS NFRDetails (
    applicationName TEXT,
    releaseID TEXT,
    businessScenario TEXT,
    transactionName TEXT,
    SLA REAL,
    TPS REAL,
    comments TEXT,
    createdBy TEXT,
    modifiedBy TEXT,
    modified_date TEXT
);

CREATE TRIGGER IF NOT EXISTS trg_InsertUpdate_NFRDetails
AFTER INSERT ON NFRDetails
FOR EACH ROW
BEGIN
    UPDATE NFRDetails
    SET 
        applicationName = NEW.applicationName,
        releaseID = NEW.releaseID,
        businessScenario = NEW.businessScenario,
        transactionName = NEW.transactionName,
        SLA = NEW.SLA,
        TPS = NEW.TPS,
        comments = NEW.comments,
        modifiedBy = NEW.modifiedBy,
        modified_date = CURRENT_TIMESTAMP
    WHERE 
        applicationName = NEW.applicationName AND
        businessScenario = NEW.businessScenario AND
        transactionName = NEW.transactionName AND
        releaseID = NEW.releaseID;

    -- If no rows were updated, insert the new row
    INSERT INTO NFRDetails (
        applicationName, releaseID, businessScenario, transactionName, SLA, TPS, comments, createdBy, modifiedBy, modified_date
    )
    SELECT
        NEW.applicationName, NEW.releaseID, NEW.businessScenario, NEW.transactionName, NEW.SLA, NEW.TPS, NEW.comments, NEW.createdBy, NEW.modifiedBy, CURRENT_TIMESTAMP
    WHERE 
        (SELECT changes() = 0);
END;
```

### Step 2: Insert or update the NFRDetails table
To perform an insert or update operation, you would directly execute an `INSERT` statement that triggers the defined behavior.

```sql
INSERT INTO NFRDetails (
    applicationName, releaseID, businessScenario, transactionName, SLA, TPS, comments, createdBy, modifiedBy
) VALUES (
    'app1', 'release1', 'scenario1', 'transaction1', 99.9, 100, 'comment', 'creator', 'modifier'
);
```

This approach leverages SQLite triggers to handle the logic defined in your SQL Server stored procedure. The `INSERT` statement will trigger the logic to update the row if it exists or insert a new one if it does not.

### Explanation
- **Trigger**: `AFTER INSERT ON NFRDetails`: This trigger fires after an insert operation on the `NFRDetails` table.
- **Update Statement**: The `UPDATE` statement inside the trigger attempts to update the existing row.
- **Insert Statement**: The `INSERT` statement with the condition `(SELECT changes() = 0)` ensures that a new row is inserted only if the `UPDATE` did not modify any rows (indicated by `changes() = 0`).

By following these steps, you can simulate the behavior of a SQL Server stored procedure for insert or update operations in SQLite.



-----


