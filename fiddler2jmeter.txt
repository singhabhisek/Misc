import os  # For file path operations
import xml.etree.ElementTree as ET  # For XML creation/editing
import zipfile  # For extracting .saz (zip) files
from urllib.parse import urlparse  # For parsing URLs
import sys  # For accessing command-line arguments

# Function to extract HTTP sessions from a Fiddler .saz file
def extract_sessions_from_saz(saz_file_path, allowed_hosts, skip_file_types):
    sessions = {}  # Dictionary to store sessions
    try:
        with zipfile.ZipFile(saz_file_path, 'r') as saz_file:  # Open .saz as a zip archive
            for file_info in saz_file.infolist():  # Iterate over all files in the archive
                # Process client request
                if file_info.filename.endswith('_c.txt'):
                    session_id = file_info.filename.replace('_c.txt', '')  # Extract session ID
                    try:
                        with saz_file.open(file_info) as file:
                            session_data = file.read().decode('utf-8')  # Read and decode
                            # Skip unwanted file types
                            if any(ext in session_data.lower() for ext in skip_file_types):
                                continue
                            lines = session_data.split('\n')
                            # Extract host from header
                            host_line = next((line for line in lines if line.lower().startswith('host:')), None)
                            if not host_line:
                                continue
                            host = host_line.split(':', 1)[1].strip()
                            if allowed_hosts and host not in allowed_hosts:  # Host filtering
                                continue
                            sessions[session_id] = {
                                'data': session_data,
                                'comment': '',
                                'status_code': None
                            }
                    except UnicodeDecodeError:
                        continue  # Skip binary or unreadable sessions
                # Process metadata or server response
                elif file_info.filename.endswith('_m.xml') or file_info.filename.endswith('_s.txt'):
                    session_id = file_info.filename.replace('_m.xml', '').replace('_s.txt', '')
                    if session_id not in sessions:
                        continue
                    if file_info.filename.endswith('_m.xml'):
                        with saz_file.open(file_info) as file:
                            xml_data = file.read().decode('utf-8')
                            root = ET.fromstring(xml_data)
                            ui_comment_element = root.find(".//SessionFlag[@N='ui-comments']")
                            ui_comment = ui_comment_element.get('V') if ui_comment_element is not None else ''
                            sessions[session_id]['comment'] = ui_comment
                    elif file_info.filename.endswith('_s.txt'):
                        with saz_file.open(file_info, 'r') as file:
                            lines = file.readlines()
                            status_line = lines[0].decode('utf-8').strip()
                            status_code = status_line.split(' ')[1]  # Extract HTTP status code
                            sessions[session_id]['status_code'] = status_code
    except Exception as e:
        print(f"Error extracting sessions from SAZ file: {e}")
    return sessions

# Function to parse a session into method, URL, headers, body, and comment
def parse_fiddler_session(session_data):
    try:
        lines = session_data['data'].strip().split('\r\n')
        request_line_parts = lines[0].split(' ')
        request_method = request_line_parts[0]  # GET, POST, etc.
        url = request_line_parts[1]
        headers = {}
        body_start = False
        body = ''
        comment = session_data['comment']
        status_code = session_data.get('status_code', None)

        for line in lines[1:]:
            if line.strip() == '':
                body_start = True  # Body starts after blank line
                continue
            if body_start:
                body += line + '\n'  # Append body content
            else:
                if line.startswith("Comment:"):
                    comment = line.split(":", 1)[1].strip()
                else:
                    if ':' in line:
                        key, value = line.split(':', 1)
                        headers[key.strip()] = value.strip()

        return request_method, url, headers, body.strip(), comment, status_code
    except Exception as e:
        print(f"Error parsing fiddler session: {e}")
        return None, None, None, None, None, None

# Function to extract domain and path from URL
def parse_url(url):
    try:
        parsed_url = urlparse(url)
        domain = parsed_url.netloc.split(':')[0]  # Remove port if any
        path = parsed_url.path
        return domain, path
    except Exception as e:
        print(f"Error parsing URL: {e}")
        return None, None

# Main function to build the .jmx file
def generate_jmeter_test_plan(sessions, allowed_hosts, allowed_status_codes, saz_file_name):
    try:
        unique_hosts = set()  # Track distinct hosts
        filtered_verbs = ["CONNECT", "HEAD"]  # Skip these HTTP methods

        # Root JMeter Test Plan XML structure
        test_plan = ET.Element('jmeterTestPlan', version="1.2", properties="5.0", jmeter="5.5")
        hash_tree_main = ET.SubElement(test_plan, 'hashTree')

        # Define Test Plan element
        test_plan_elem = ET.SubElement(hash_tree_main, 'TestPlan', guiclass="TestPlanGui", testclass="TestPlan",
                                       testname="Test Plan", enabled="true")
        ET.SubElement(test_plan_elem, 'stringProp', name="TestPlan.comments")
        ET.SubElement(test_plan_elem, 'boolProp', name="TestPlan.functional_mode").text = "false"
        ET.SubElement(test_plan_elem, 'boolProp', name="TestPlan.tearDown_on_shutdown").text = "true"
        ET.SubElement(test_plan_elem, 'boolProp', name="TestPlan.serialize_threadgroups").text = "false"

        # Add user-defined variables (for filtered verbs)
        user_defined_vars = ET.SubElement(test_plan_elem, 'elementProp', name="TestPlan.user_defined_variables",
                                          elementType="Arguments", guiclass="ArgumentsPanel", testclass="Arguments",
                                          testname="User Defined Variables", enabled="true")
        collection_prop = ET.SubElement(user_defined_vars, 'collectionProp', name="Arguments.arguments")
        for verb in filtered_verbs:
            element_prop = ET.SubElement(collection_prop, 'elementProp', name="", elementType="Argument")
            ET.SubElement(element_prop, 'stringProp', name="Argument.name").text = f"filter_{verb}"
            ET.SubElement(element_prop, 'stringProp', name="Argument.value").text = "true"
            ET.SubElement(element_prop, 'stringProp', name="Argument.metadata").text = "="

        ET.SubElement(test_plan_elem, 'stringProp', name="TestPlan.user_define_classpath")
        hash_tree_after_test_plan = ET.SubElement(hash_tree_main, 'hashTree')

        # Add global managers: HeaderManager, CookieManager, CacheManager, ViewResultsTree
        for component, testname, guiclass in [
            ('HeaderManager', 'Header Manager', 'HeaderPanel'),
            ('CookieManager', 'HTTP Cookie Manager', 'CookiePanel'),
            ('CacheManager', 'HTTP Cache Manager', 'CacheManagerGui'),
            ('ResultCollector', 'View Results Tree', 'ViewResultsFullVisualizer')
        ]:
            comp_elem = ET.SubElement(hash_tree_after_test_plan, component,
                                      guiclass=guiclass, testclass=component,
                                      testname=testname, enabled="true")
            if component == 'HeaderManager':
                ET.SubElement(comp_elem, 'collectionProp', name="HeaderManager.headers")
            elif component == 'CookieManager':
                ET.SubElement(comp_elem, 'boolProp', name="CookieManager.clearEachIteration").text = "false"
            elif component == 'CacheManager':
                ET.SubElement(comp_elem, 'boolProp', name="CacheManager.clearEachIteration").text = "true"
            elif component == 'ResultCollector':
                ET.SubElement(comp_elem, 'stringProp', name="filename")
            ET.SubElement(hash_tree_after_test_plan, 'hashTree')  # Required tree node

        # Define Thread Group (where requests are executed)
        thread_group = ET.SubElement(hash_tree_after_test_plan, 'ThreadGroup', guiclass="ThreadGroupGui",
                                     testclass="ThreadGroup", testname="Thread Group", enabled="true")
        ET.SubElement(thread_group, 'stringProp', name="ThreadGroup.on_sample_error").text = "continue"
        loop_controller = ET.SubElement(thread_group, 'elementProp', name="ThreadGroup.main_controller",
                                        elementType="LoopController", guiclass="LoopControlPanel",
                                        testclass="LoopController", testname="Loop Controller", enabled="true")
        ET.SubElement(loop_controller, 'boolProp', name="LoopController.continue_forever").text = "false"
        ET.SubElement(loop_controller, 'stringProp', name="LoopController.loops").text = "1"
        ET.SubElement(thread_group, 'stringProp', name="ThreadGroup.num_threads").text = "1"
        ET.SubElement(thread_group, 'stringProp', name="ThreadGroup.ramp_time").text = "1"
        ET.SubElement(thread_group, 'boolProp', name="ThreadGroup.scheduler").text = "false"
        ET.SubElement(thread_group, 'boolProp', name="ThreadGroup.same_user_on_next_iteration").text = "true"
        hash_tree_for_samplers = ET.SubElement(hash_tree_after_test_plan, 'hashTree')

        current_transaction_controller = None
        hash_tree_for_transaction = None
        last_comment = None

        # Build HTTP samplers from sessions
        for session_id, session_data in sessions.items():
            request_method, url, headers, body, comment, status_code = parse_fiddler_session(session_data)
            domain, path = parse_url(url)

            # Apply filters
            if request_method in filtered_verbs:
                continue
            if domain is None or (allowed_hosts and domain not in allowed_hosts):
                continue
            if allowed_status_codes and session_data['status_code'] not in allowed_status_codes:
                continue

            unique_hosts.add(domain)

            # Create new TransactionController when comment changes
            if comment != last_comment:
                current_transaction_controller = ET.SubElement(hash_tree_for_samplers, 'TransactionController',
                                                               guiclass="TransactionControllerGui",
                                                               testclass="TransactionController", testname=comment,
                                                               enabled="true")
                ET.SubElement(current_transaction_controller, 'boolProp', name="TransactionController.includeTimers").text = "false"
                ET.SubElement(current_transaction_controller, 'boolProp', name="TransactionController.parent").text = "false"
                hash_tree_for_transaction = ET.SubElement(hash_tree_for_samplers, 'hashTree')

                # Add 5-second Constant Timer inside transaction
                timer = ET.SubElement(hash_tree_for_transaction, 'ConstantTimer',
                                      guiclass="ConstantTimerGui", testclass="ConstantTimer",
                                      testname="Constant Timer", enabled="true")
                ET.SubElement(timer, 'stringProp', name="ConstantTimer.delay").text = "5000"
                ET.SubElement(hash_tree_for_transaction, 'hashTree')

            # Add HTTPSampler (HTTP request)
            http_sampler = ET.SubElement(hash_tree_for_transaction, 'HTTPSamplerProxy',
                                         guiclass="HttpTestSampleGui", testclass="HTTPSamplerProxy",
                                         testname=f"HTTP Request - {comment}", enabled="true")

            # If method requires body (POST/PUT/DELETE), include raw payload
            if request_method in ['POST', 'PUT', 'DELETE']:
                ET.SubElement(http_sampler, 'boolProp', name="HTTPSampler.postBodyRaw").text = "true"
                arguments = ET.SubElement(http_sampler, 'elementProp', name="HTTPsampler.Arguments",
                                          elementType="Arguments")
                collection_prop = ET.SubElement(arguments, 'collectionProp', name="Arguments.arguments")
                arg_element = ET.SubElement(collection_prop, 'elementProp', name="", elementType="HTTPArgument")
                ET.SubElement(arg_element, 'boolProp', name="HTTPArgument.always_encode").text = "false"
                ET.SubElement(arg_element, 'stringProp', name="Argument.value").text = body
                ET.SubElement(arg_element, 'stringProp', name="Argument.metadata").text = "="

            # Set sampler properties
            ET.SubElement(http_sampler, 'stringProp', name="HTTPSampler.domain").text = domain
            ET.SubElement(http_sampler, 'stringProp', name="HTTPSampler.port").text = "80" if url.startswith('http://') else "443"
            ET.SubElement(http_sampler, 'stringProp', name="HTTPSampler.protocol").text = "http" if url.startswith('http://') else "https"
            ET.SubElement(http_sampler, 'stringProp', name="HTTPSampler.path").text = path
            ET.SubElement(http_sampler, 'stringProp', name="HTTPSampler.method").text = request_method
            ET.SubElement(http_sampler, 'boolProp', name="HTTPSampler.follow_redirects").text = "true"
            ET.SubElement(http_sampler, 'boolProp', name="HTTPSampler.auto_redirects").text = "false"
            ET.SubElement(http_sampler, 'boolProp', name="HTTPSampler.use_keepalive").text = "true"
            ET.SubElement(http_sampler, 'boolProp', name="HTTPSampler.DO_MULTIPART_POST").text = "false"

            # Attach HeaderManager (specific to this request)
            sampler_hash_tree = ET.SubElement(hash_tree_for_transaction, 'hashTree')
            if headers:
                header_manager = ET.SubElement(sampler_hash_tree, 'HeaderManager',
                                               guiclass="HeaderPanel", testclass="HeaderManager",
                                               testname="HTTP Header Manager", enabled="true")
                collection_prop = ET.SubElement(header_manager, 'collectionProp', name="HeaderManager.headers")
                for k, v in headers.items():
                    element_prop = ET.SubElement(collection_prop, 'elementProp', name="", elementType="Header")
                    ET.SubElement(element_prop, 'stringProp', name="Header.name").text = k
                    ET.SubElement(element_prop, 'stringProp', name="Header.value").text = v
                ET.SubElement(sampler_hash_tree, 'hashTree')
            else:
                ET.SubElement(sampler_hash_tree, 'hashTree')

            last_comment = comment  # Track comment to group samplers

        # Write output .jmx file
        jmx_file_path = os.path.join(os.path.dirname(saz_file_name),
                                     f"{os.path.splitext(os.path.basename(saz_file_name))[0]}.jmx")
        tree = ET.ElementTree(test_plan)
        tree.write(jmx_file_path, encoding="utf-8", xml_declaration=True)

        # Display unique hosts
        print("\nUnique Hosts in JMX:")
        for host in sorted(unique_hosts):
            print(f"- {host}")

        print("\nJMeter test plan generated successfully!")

    except Exception as e:
        print(f"Error generating JMeter test plan: {e}")

# Entry point: read args and run
if __name__ == "__main__":
    saz_file_path = sys.argv[1]  # First argument = .saz file path
    allowed_hosts_arg = sys.argv[2] if len(sys.argv) > 2 else ''  # Optional: comma-separated host filter
    allowed_hosts = [h.strip() for h in allowed_hosts_arg.split(',')] if allowed_hosts_arg else []
    allowed_status_codes = ["200", "302"]  # Only include successful responses
    skip_file_types = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.ico', '.css', '.js', '.woff', '.woff2', '.ttf', '.otf', '.svg']

    sessions = extract_sessions_from_saz(saz_file_path, allowed_hosts, skip_file_types)
    generate_jmeter_test_plan(sessions, allowed_hosts, allowed_status_codes, saz_file_path)
